<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>exemple</groupId>
		<artifactId>exemple-service</artifactId>
		<version>3.0.0-SNAPSHOT</version>
	</parent>
	<artifactId>exemple-service-api-launcher</artifactId>
	<packaging>war</packaging>

	<properties>

		<!-- TOMCAT -->
		<tomcat.container.id>tomcat9x</tomcat.container.id>

		<application.log.file>${project.build.testOutputDirectory}/logback.xml</application.log.file>
		<application.contextpath>ExempleService</application.contextpath>
		<application.host>http://localhost</application.host>

		<!-- RESOURCE -->

		<configuration.name>exemple-service-configuration</configuration.name>
		<configuration.path>file:${project.build.testOutputDirectory}/exemple-service-test.yml</configuration.path>

		<!-- SONAR -->
		<sonar.coverage.jacoco.xmlReportPaths>${sonar.coverage.report.path}</sonar.coverage.jacoco.xmlReportPaths>

		<!-- API -->
		<cassandra.host>127.0.0.1</cassandra.host>
		<hazelcast.port>5706</hazelcast.port>

	</properties>

	<dependencyManagement>

		<dependencies>

			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat</artifactId>
				<version>${tomcat.version}</version>
				<type>pom</type>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-java</artifactId>
				<version>7.6.0</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-spring</artifactId>
				<version>7.6.0</version>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-junit-platform-engine</artifactId>
				<version>7.6.0</version>
				<scope>test</scope>
			</dependency>

			<!-- JUNIT PLATEFORM -->

			<dependency>
				<groupId>org.junit.platform</groupId>
				<artifactId>junit-platform-suite-api</artifactId>
				<version>1.8.2</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>org.junit.platform</groupId>
				<artifactId>junit-platform-suite-engine</artifactId>
				<version>1.8.2</version>
				<scope>test</scope>
			</dependency>

			<!-- BCRYPT -->
			<!-- https://www.mindrot.org/projects/jBCrypt/ -->

			<dependency>
				<groupId>org.mindrot</groupId>
				<artifactId>jbcrypt</artifactId>
				<version>0.4</version>
			</dependency>

			<!-- JSOUP -->
			<!-- https://jsoup.org/ -->

			<dependency>
				<groupId>org.jsoup</groupId>
				<artifactId>jsoup</artifactId>
				<version>1.15.1</version>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>

		<!-- API -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-api</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- JSOUP -->

		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- BCRYPT -->

		<dependency>
			<groupId>org.mindrot</groupId>
			<artifactId>jbcrypt</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- TEST -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- REST ASSURED -->

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- CUCUMBER -->

		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-spring</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit-platform-engine</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- JUNIT PLATEFORM -->

		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-engine</artifactId>
		</dependency>

	</dependencies>

	<build>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/test/resources/contexts/test_company</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<pluginManagement>

			<plugins>

				<!-- CARGO -->
				<!-- https://codehaus-cargo.github.io/cargo/Maven2+plugin.html -->
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven3-plugin</artifactId>
					<version>1.9.3</version>
					<configuration>
						<container>
							<containerId>${tomcat.container.id}</containerId>
							<output>${project.build.directory}/cargo/configurations/${tomcat.container.id}/logs/container.log</output>
							<timeout>180000</timeout>
							<artifactInstaller>
								<groupId>org.apache.tomcat</groupId>
								<artifactId>tomcat</artifactId>
								<version>${tomcat.version}</version>
							</artifactInstaller>
							<systemProperties>
								<spring.profiles.active>etude,noSecurity</spring.profiles.active>
							</systemProperties>
						</container>
						<configuration>
							<properties>
								<!-- le choix du port permet d'arrêter proprement le tomcat sans 
									être conflit avec un autre tomcat en cours d'exécution -->
								<cargo.servlet.port>${application.port}</cargo.servlet.port>
								<cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
								<cargo.tomcat.ajp.port>${cargo.ajp.port}</cargo.tomcat.ajp.port>
								<cargo.jvmargs>${jacoco.it.agent.argLine}
									-Dlogging.config=file:${application.log.file} -Xmx1g</cargo.jvmargs>
							</properties>
						</configuration>
					</configuration>
					<executions>
						<!-- start server before integration tests -->
						<execution>
							<id>start-container</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>start</goal>
							</goals>
						</execution>
						<!-- stop server after integration tests -->
						<execution>
							<id>stop-container</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>stop</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- DOCKER -->
				<!-- http://dmp.fabric8.io/ -->
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>0.40.2</version>
				</plugin>

				<!-- TEST INTEGRATION -->
				<!-- http://maven.apache.org/surefire/maven-failsafe-plugin/ -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

			</plugins>

		</pluginManagement>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<profiles>

		<profile>
			<id>service</id>

			<properties>

				<!-- API -->
				<hazelcast.port>5701</hazelcast.port>

			</properties>

			<dependencies>

				<!-- RESOURCE CONNECTOR -->
				<dependency>
					<groupId>org.glassfish.main.resources</groupId>
					<artifactId>resources-connector</artifactId>
					<version>5.1.0</version>
					<scope>test</scope>
				</dependency>

			</dependencies>

			<build>
				<plugins>

					<!-- HELPER -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>reserve-network-port</id>
								<goals>
									<goal>reserve-network-port</goal>
								</goals>
								<phase>process-resources</phase>
								<configuration>
									<portNames>
										<portName>application.port</portName>
										<portName>cargo.rmi.port</portName>
										<portName>cargo.ajp.port</portName>
										<portName>cassandra.port</portName>
										<portName>zookeeper.port</portName>
										<portName>kafka.port</portName>
									</portNames>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- JACOCO -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<excludes>
								<exclude>com/exemple/service/api/launcher/account/**</exclude>
								<exclude>com/exemple/service/api/launcher/actuate/**</exclude>
								<exclude>com/exemple/service/api/launcher/core/**</exclude>
								<exclude>com/exemple/service/api/launcher/login/**</exclude>
								<exclude>com/exemple/service/api/launcher/stock/**</exclude>
								<exclude>com/exemple/service/api/launcher/subscription/**</exclude>
								<exclude>com/exemple/service/api/launcher/swagger/**</exclude>
							</excludes>
						</configuration>
						<executions>
							<execution>
								<id>report-integration</id>
								<goals>
									<goal>report-integration</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- DOCKER -->
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>start_cassandra</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>cassandra:${cassandra-version}</name>
											<alias>cassandra</alias>
											<run>
												<ports>
													<port>${cassandra.port}:9042</port>
												</ports>
												<wait>
													<log>(?s)Startup complete</log>
													<time>60000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>start_zookeeper</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>zookeeper:3.8.0</name>
											<alias>zookeeper</alias>
											<run>
												<ports>
													<port>${zookeeper.port}:2181</port>
												</ports>
												<wait>
													<time>5000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>start_kafka</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>bitnami/kafka:3.2.0</name>
											<alias>kafka</alias>
											<run>
												<ports>
													<port>9092:9092</port>
													<port>${kafka.port}:9093</port>
												</ports>
												<env>
													<ALLOW_PLAINTEXT_LISTENER>yes</ALLOW_PLAINTEXT_LISTENER>
													<KAFKA_CFG_ZOOKEEPER_CONNECT>172.17.0.1:${zookeeper.port}</KAFKA_CFG_ZOOKEEPER_CONNECT>
													<KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT</KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>
													<KAFKA_CFG_LISTENERS>CLIENT://:9092,EXTERNAL://:9093</KAFKA_CFG_LISTENERS>
													<KAFKA_CFG_ADVERTISED_LISTENERS>CLIENT://localhost:9092,EXTERNAL://localhost:${kafka.port}</KAFKA_CFG_ADVERTISED_LISTENERS>
													<KAFKA_CFG_INTER_BROKER_LISTENER_NAME>CLIENT</KAFKA_CFG_INTER_BROKER_LISTENER_NAME>
												</env>
												<wait>
													<time>10000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>stop_all</id>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- CARGO -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven3-plugin</artifactId>
						<configuration>
							<ignoreFailures>true</ignoreFailures>
							<container>
								<dependencies>
									<dependency>
										<groupId>org.glassfish.main.resources</groupId>
										<artifactId>resources-connector</artifactId>
									</dependency>
								</dependencies>
							</container>
							<deployables>
								<deployable>
									<groupId>${project.groupId}</groupId>
									<artifactId>${artifactId.groupId}</artifactId>
									<type>war</type>
									<properties>
										<context>/${application.contextpath}</context>
									</properties>
								</deployable>
							</deployables>
							<configuration>
								<properties>
									<cargo.resource.resource.spring>
										cargo.resource.name=spring.config.additional-location|
										cargo.resource.type=java.lang.String|
										cargo.resource.parameters=factory=org.glassfish.resources.custom.factory.PrimitivesAndStringFactory;value=${configuration.path}
									</cargo.resource.resource.spring>
								</properties>
							</configuration>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>it</id>

			<build>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<application.host>${application.host}</application.host>
								<application.port>${application.port}</application.port>
								<application.contextpath>${application.contextpath}</application.contextpath>
							</systemPropertyVariables>
							<argLine>${jacoco.it.agent.argLine}</argLine>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>

</project>