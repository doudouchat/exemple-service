<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>exemple</groupId>
		<artifactId>exemple-service</artifactId>
		<version>1.0.2-SNAPSHOT</version>
	</parent>
	<artifactId>exemple-service-api-integration</artifactId>

	<properties>

		<!-- TOMCAT -->
		<tomcat.container.id>tomcat9x</tomcat.container.id>
		<tomcat.version>9.0.33</tomcat.version>

		<application.log.file>${project.build.testOutputDirectory}/logback.groovy</application.log.file>
		<application.contextpath>ExempleService</application.contextpath>
		<application.host>http://localhost</application.host>

		<!-- RESOURCE -->

		<configuration.name>exemple-service-configuration</configuration.name>
		<configuration.path>file:${project.build.testOutputDirectory}/exemple-service-test.yml</configuration.path>

		<!-- SONAR -->
		<sonar.coverage.exclusions>**/core/**/*.java</sonar.coverage.exclusions>
		<sonar.exclusions>**/core/PrimitivesAndStringFactory.java</sonar.exclusions>

		<!-- API -->
		<cassandra.host>127.0.0.1</cassandra.host>
		<cassandra.nativeTransportPort>9042</cassandra.nativeTransportPort>
		<hazelcast.port>5705</hazelcast.port>
		<zmp.clientPort>10024</zmp.clientPort>

	</properties>

	<dependencies>

		<!-- RESOURCE -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-resource</artifactId>
			<version>${project.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- APPLICATION -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-application</artifactId>
			<version>${project.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- SPRING FRAMEWORK -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>

		<!-- COMMONS APACHE -->

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<!-- JSON -->

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- JSOUP -->

		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- HAMCREST -->

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
		</dependency>

		<!-- GROOVY -->

		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy</artifactId>
		</dependency>

		<!-- TEST -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>

		<!-- REST ASSURED -->

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured-all</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>compile</scope>
		</dependency>

	</dependencies>

	<build>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<pluginManagement>

			<plugins>

				<!-- CARGO -->
				<!-- https://codehaus-cargo.github.io/cargo/Maven2+plugin.html -->
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>1.7.11</version>
					<configuration>
						<container>
							<containerId>${tomcat.container.id}</containerId>
							<output>${project.build.directory}/cargo/configurations/${tomcat.container.id}/logs/container.log</output>
							<timeout>180000</timeout>
							<artifactInstaller>
								<groupId>org.apache.tomcat</groupId>
								<artifactId>tomcat</artifactId>
								<version>${tomcat.version}</version>
							</artifactInstaller>
							<systemProperties>
								<spring.profiles.active>etude,noSecurity</spring.profiles.active>
							</systemProperties>
						</container>
						<configuration>
							<properties>
								<!-- le choix du port permet d'arrêter proprement le tomcat sans 
									être conflit avec un autre tomcat en cours d'exécution -->
								<cargo.servlet.port>${application.port}</cargo.servlet.port>
								<cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
								<cargo.tomcat.ajp.port>${cargo.ajp.port}</cargo.tomcat.ajp.port>
								<cargo.jvmargs>${jacoco.it.agent.argLine}
									-Dlogging.config=file:${application.log.file}</cargo.jvmargs>
							</properties>
						</configuration>
					</configuration>
					<executions>
						<!-- start server before integration tests -->
						<execution>
							<id>start-container</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>start</goal>
							</goals>
						</execution>
						<!-- stop server after integration tests -->
						<execution>
							<id>stop-container</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>stop</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- ZOOKEEPER -->
				<!-- https://code.revelc.net/zookeeper-maven-plugin/index.html -->
				<plugin>
					<groupId>net.revelc.code</groupId>
					<artifactId>zookeeper-maven-plugin</artifactId>
					<version>1.1.0</version>
					<dependencies>
						<dependency>
							<groupId>org.apache.zookeeper</groupId>
							<artifactId>zookeeper</artifactId>
							<version>3.5.7</version>
						</dependency>
					</dependencies>
				</plugin>

				<!-- TEST INTEGRATION -->
				<!-- http://maven.apache.org/surefire/maven-failsafe-plugin/ -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>3.0.0-M4</version>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
							<configuration>
								<encoding>${project.build.sourceEncoding}</encoding>
							</configuration>
						</execution>
					</executions>
				</plugin>

			</plugins>

		</pluginManagement>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<profiles>

		<profile>
			<id>service</id>

			<dependencies>

				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>exemple-service-api</artifactId>
					<version>${project.version}</version>
					<type>war</type>
				</dependency>

			</dependencies>

			<build>

				<plugins>

					<!-- HELPER -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>reserve-network-port</id>
								<goals>
									<goal>reserve-network-port</goal>
								</goals>
								<phase>process-resources</phase>
								<configuration>
									<portNames>
										<portName>application.port</portName>
										<portName>cargo.rmi.port</portName>
										<portName>cargo.ajp.port</portName>
										<portName>cassandra.rpcPort</portName>
										<portName>cassandra.jmxPort</portName>
										<portName>cassandra.storagePort</portName>
										<portName>cassandra.stopPort</portName>
										<portName>cassandra.nativeTransportPort</portName>
										<portName>hazelcast.port</portName>
										<portName>zmp.clientPort</portName>
										<portName>zmp.shutdownPort</portName>
										<portName>kafka.port</portName>
									</portNames>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- CASSANDRA -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cassandra-maven-plugin</artifactId>
						<configuration>
							<script>${project.basedir}/src/test/resources/cassandra/schema.cql</script>
							<cqlScript>${project.basedir}/src/test/resources/cassandra/exec.cql</cqlScript>
							<logLevel>INFO</logLevel>
							<cqlVersion>3.4.5</cqlVersion>
							<startNativeTransport>true</startNativeTransport>
							<addTestClasspath>true</addTestClasspath>
						</configuration>
						<executions>
							<execution>
								<id>start cassandra</id>
								<goals>
									<goal>start</goal>
									<goal>cql-exec</goal>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.codehaus.groovy</groupId>
								<artifactId>groovy</artifactId>
								<version>${groovy-version}</version>
							</dependency>

						</dependencies>
					</plugin>

					<!-- ZOOKEEPER -->
					<plugin>
						<groupId>net.revelc.code</groupId>
						<artifactId>zookeeper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>run-zookeeper</id>
								<goals>
									<goal>start</goal>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- CARGO -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<dependencies>
									<dependency>
										<groupId>${project.groupId}</groupId>
										<artifactId>${project.artifactId}</artifactId>
									</dependency>
								</dependencies>
							</container>
							<ignoreFailures>true</ignoreFailures>
							<deployables>
								<deployable>
									<groupId>${project.groupId}</groupId>
									<artifactId>exemple-service-api</artifactId>
									<type>war</type>
									<properties>
										<context>/${application.contextpath}</context>
									</properties>
								</deployable>
							</deployables>
							<configuration>
								<properties>
									<cargo.resource.resource.spring>
										cargo.resource.name=spring.config.location|
										cargo.resource.type=java.lang.String|
										cargo.resource.parameters=factory=com.exemple.service.api.integration.core.PrimitivesAndStringFactory;value=classpath:default.yml
									</cargo.resource.resource.spring>
									<cargo.resource.resource.api>
										cargo.resource.name=${configuration.name}|
										cargo.resource.type=java.lang.String|
										cargo.resource.parameters=factory=com.exemple.service.api.integration.core.PrimitivesAndStringFactory;value=${configuration.path}
									</cargo.resource.resource.api>
								</properties>
								<configfiles>
									<configfile>
										<file>${project.build.testOutputDirectory}/application.conf</file>
										<todir>lib</todir>
									</configfile>
								</configfiles>
							</configuration>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>it</id>

			<build>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<suiteXmlFiles combine.children="append">
								<suiteXmlFile>testng.xml</suiteXmlFile>
							</suiteXmlFiles>
							<systemPropertyVariables>
								<application.host>${application.host}</application.host>
								<application.port>${application.port}</application.port>
								<application.contextpath>${application.contextpath}</application.contextpath>
							</systemPropertyVariables>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>

</project>